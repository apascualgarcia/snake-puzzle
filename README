This is a framework for folding snake puzzles

1) Edit the src/config.h file with your input sequence
2) Compile the source C file (src/TheCube62.c)

   $ gcc TheCube62.c -o TheCube62.a -lm

The program can be run from the command line with default options by

   $ ./TheCube62.a

The coordinates of the solutions will be printed on stdout by default. You can
print the solutions in different files by using the -o flag:

   $ ./TheCube62.a -o solution

The files will have appended the number of the solution. For the previous
example, files named solution.0001, solution.0002, ... will be created with the
coordinates of each valid solution.

If you are not interested on the coordinates of the solutions, you can use the
-c option (count) which will only print the number of solutions found.

Another flag is -s, which will extend the search to include specular solutions
(or mirror images), analogous to the enantiomers in chemistry. By default, if 
the -s flag is not used, the solutions provided will not include the mirror
structures.

Note that the program by default tries to fold the puzzle in a bounding box
as smallest as possible. You can extend the bounding box limits, but it is not
recommended, since the size of the search tree grows exponentially if there are
no limits. To extend the limits, use the option -b followed by a positive
integer. For an infinite bounding box, use 0 as the argument to the -b flag.

It is possible to print the number of contacts between the units of the snake
as the Hamiltonian walks (or folding) is taking place. Use the option -E
followed by the name for the output file.

EXAMPLES:

    $ ./TheCube62.a -s -b 4 -o sequence_01 -E energies.txt

will search the solutions for your sequence within a 4x4x4 cube, including the
enantiomers. For each solution, a file with the coordinates of the solution
will be created (sequence_01.0001, sequence_01.0002, ...) and the number of
contacts along the search will be written in the file energies.txt

    $ ./TheCube62.a -c -b 0 -E contacts.dat

will search for all the possible non-overlapping Hamiltonian walks and only the
number of contacts along the search will be written into a file (contacts.dat).
The solutions will not be written into files nor stdout.

Change
